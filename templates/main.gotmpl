// AUTO-GENERATED

package main

{{ $name := .Name }}
{{ $operations := .Operations }}
import (
    "fmt"
    "log"

    "{{.GenCommon.TargetImportPath}}/restapi"
    "{{.GenCommon.TargetImportPath}}/restapi/operations"
{{range $index, $op := .Operations}}
{{ $found := false }}
{{ range $i, $sop := $operations }}
{{ if and (gt $i $index ) (eq $op.Package $sop.Package)}}
{{ $found = true }}
{{end}}
{{end}}
{{ if not $found }}
    api{{ pascalize $op.Package }} "{{$op.GenCommon.TargetImportPath}}/{{ $op.RootPackage }}/operations/{{ $op.Package }}"
{{end}}
{{end}}

    "github.com/go-openapi/loads"
    "github.com/vrischmann/envconfig"
    flags "github.com/jessevdk/go-flags"

    "{{.GenCommon.TargetImportPath}}/app"


)

func main() {
    swaggerSpec, err := loads.Analyzed({{ .APIPackage }}.SwaggerJSON, "")
    if err != nil {
        log.Fatalln(err)
    }

    srv,err := app.New()
    if err != nil{
    	log.Fatalln(err)
    }
    api := operations.New{{ pascalize .Name }}API(swaggerSpec)

    {{range .Operations}}
    api.{{ pascalize .Package }}{{ pascalize .Name }}Handler = api{{ pascalize .Package }}.{{ pascalize .Name }}HandlerFunc(srv.{{ pascalize .Name }}Handler)
    {{- end}}
    api.ServerShutdown = srv.OnShutdown
    server := {{ .APIPackage }}.NewServer(api)
    defer server.Shutdown()

    parser := flags.NewParser(server, flags.Default)
    parser.ShortDescription = "Petition manager"
    parser.LongDescription = "Petition manager"

    server.ConfigureFlags()
    for _, optsGroup := range api.CommandLineOptionsGroups {
        _, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
        if err != nil {
            log.Fatalln(err)
        }
    }

    if _, err := parser.Parse(); err != nil {
        code := 1
        if fe, ok := err.(*flags.Error); ok {
            if fe.Type == flags.ErrHelp {
                code = 0
            }
        }
        os.Exit(code)
    }

    server.ConfigureAPI()

    if err := server.Serve(); err != nil{
        log.Fatalln(err)
    }
}